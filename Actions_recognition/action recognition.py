{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cca40e33-71da-403b-81be-8c71f9949c2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\usama\\AppData\\Local\\Temp\\ipykernel_5588\\398180394.py:32: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  torch.load(self.path_model, map_location=self.device)\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "class NeuralNet(nn.Module):\n",
    "    def __init__(\n",
    "        self,\n",
    "        input_size = 24,\n",
    "        hidden_size = 256,\n",
    "        num_classes = 3\n",
    "    ):\n",
    "        super(NeuralNet, self).__init__()\n",
    "        self.l1 = nn.Linear(input_size, hidden_size)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.l2 = nn.Linear(hidden_size, num_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        out = self.l1(x)\n",
    "        out = self.relu(out)\n",
    "        out = self.l2(out)\n",
    "        return out\n",
    "\n",
    "class KeypointClassification:\n",
    "    def __init__(self, path_model):\n",
    "        self.path_model = path_model\n",
    "        self.classes = ['run', 'stand', 'walk']\n",
    "        self.device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "        self.load_model()\n",
    "\n",
    "    def load_model(self):\n",
    "        self.model = NeuralNet()\n",
    "        self.model.load_state_dict(\n",
    "            torch.load(self.path_model, map_location=self.device)\n",
    "        )\n",
    "    def __call__(self, input_keypoint):\n",
    "        if not type(input_keypoint) == torch.Tensor:\n",
    "            input_keypoint = torch.tensor(\n",
    "                input_keypoint, dtype=torch.float32\n",
    "            )\n",
    "        out = self.model(input_keypoint)\n",
    "        _, predict = torch.max(out, -1)\n",
    "        label_predict = self.classes[predict]\n",
    "        return label_predict\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    keypoint_classification = KeypointClassification(\n",
    "        path_model='action_classification.pt'\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73386192-0fec-4534-829f-056c4bf53762",
   "metadata": {},
   "source": [
    "# Yolo_Model for key point extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3f6f8220-c570-4f9b-97b8-555ad4590c20",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import cv2\n",
    "import numpy as np\n",
    "from pydantic import BaseModel\n",
    "import ultralytics\n",
    "\n",
    "# Define keypoint mappings\n",
    "class GetKeypoint(BaseModel):\n",
    "    NOSE:           int = 0\n",
    "    LEFT_EYE:       int = 1\n",
    "    RIGHT_EYE:      int = 2\n",
    "    LEFT_EAR:       int = 3\n",
    "    RIGHT_EAR:      int = 4\n",
    "    LEFT_SHOULDER:  int = 5\n",
    "    RIGHT_SHOULDER: int = 6\n",
    "    LEFT_ELBOW:     int = 7\n",
    "    RIGHT_ELBOW:    int = 8\n",
    "    LEFT_WRIST:     int = 9\n",
    "    RIGHT_WRIST:    int = 10\n",
    "    LEFT_HIP:       int = 11\n",
    "    RIGHT_HIP:      int = 12\n",
    "    LEFT_KNEE:      int = 13\n",
    "    RIGHT_KNEE:     int = 14\n",
    "    LEFT_ANKLE:     int = 15\n",
    "    RIGHT_ANKLE:    int = 16\n",
    "\n",
    "class DetectKeypoint:\n",
    "    def __init__(self, yolov8_model='yolov8m-pose'):\n",
    "        self.yolov8_model = yolov8_model\n",
    "        self.get_keypoint = GetKeypoint()\n",
    "        self.__load_model()\n",
    "\n",
    "    def __load_model(self):\n",
    "        if not self.yolov8_model.endswith('-pose'):\n",
    "            sys.exit('Model not a YOLOv8 pose model')\n",
    "        self.model = ultralytics.YOLO(self.yolov8_model)\n",
    "\n",
    "    def extract_keypoint(self, keypoint: np.ndarray) -> list:\n",
    "        return [\n",
    "            keypoint[self.get_keypoint.NOSE][0], keypoint[self.get_keypoint.NOSE][1],\n",
    "            keypoint[self.get_keypoint.LEFT_EYE][0], keypoint[self.get_keypoint.LEFT_EYE][1],\n",
    "            keypoint[self.get_keypoint.RIGHT_EYE][0], keypoint[self.get_keypoint.RIGHT_EYE][1],\n",
    "            keypoint[self.get_keypoint.LEFT_EAR][0], keypoint[self.get_keypoint.LEFT_EAR][1],\n",
    "            keypoint[self.get_keypoint.RIGHT_EAR][0], keypoint[self.get_keypoint.RIGHT_EAR][1],\n",
    "            keypoint[self.get_keypoint.LEFT_SHOULDER][0], keypoint[self.get_keypoint.LEFT_SHOULDER][1],\n",
    "            keypoint[self.get_keypoint.RIGHT_SHOULDER][0], keypoint[self.get_keypoint.RIGHT_SHOULDER][1],\n",
    "            keypoint[self.get_keypoint.LEFT_ELBOW][0], keypoint[self.get_keypoint.LEFT_ELBOW][1],\n",
    "            keypoint[self.get_keypoint.RIGHT_ELBOW][0], keypoint[self.get_keypoint.RIGHT_ELBOW][1],\n",
    "            keypoint[self.get_keypoint.LEFT_WRIST][0], keypoint[self.get_keypoint.LEFT_WRIST][1],\n",
    "            keypoint[self.get_keypoint.RIGHT_WRIST][0], keypoint[self.get_keypoint.RIGHT_WRIST][1],\n",
    "            keypoint[self.get_keypoint.LEFT_HIP][0], keypoint[self.get_keypoint.LEFT_HIP][1],\n",
    "            keypoint[self.get_keypoint.RIGHT_HIP][0], keypoint[self.get_keypoint.RIGHT_HIP][1],\n",
    "            keypoint[self.get_keypoint.LEFT_KNEE][0], keypoint[self.get_keypoint.LEFT_KNEE][1],\n",
    "            keypoint[self.get_keypoint.RIGHT_KNEE][0], keypoint[self.get_keypoint.RIGHT_KNEE][1],\n",
    "            keypoint[self.get_keypoint.LEFT_ANKLE][0], keypoint[self.get_keypoint.LEFT_ANKLE][1],\n",
    "            keypoint[self.get_keypoint.RIGHT_ANKLE][0], keypoint[self.get_keypoint.RIGHT_ANKLE][1]\n",
    "        ]\n",
    "\n",
    "    def get_xy_keypoint(self, results) -> list:\n",
    "        result_keypoint = results.keypoints.xyn[0].cpu().numpy()  # Access keypoints\n",
    "        return self.extract_keypoint(result_keypoint)\n",
    "\n",
    "    def __call__(self, image: np.ndarray):\n",
    "        results = self.model(image, save=False)[0]  # Predict without saving\n",
    "        return results\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6efc1ad8-51c3-43c8-846f-9839979c7d5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_keypoint(keypoint):\n",
    "    # List to hold the x, y coordinates of each keypoint\n",
    "    keypoint_coordinates = []\n",
    "\n",
    "    # Iterate over all keypoints defined in GetKeypoint\n",
    "    for point in GetKeypoint.__fields__.values():\n",
    "        x, y = keypoint[point.default]  # Access each keypoint's x, y coordinates\n",
    "        keypoint_coordinates.extend([x, y])\n",
    "\n",
    "    return keypoint_coordinates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ade507ec-034a-49d6-8814-231c9117adc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import cv2\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import ultralytics\n",
    "\n",
    "# Initialize the keypoint detection and classification models\n",
    "detection_keypoint = DetectKeypoint()\n",
    "classification_keypoint = KeypointClassification('action_classification.pt')\n",
    "\n",
    "# Start capturing video from the webcam\n",
    "cap = cv2.VideoCapture(0)\n",
    "\n",
    "while True:\n",
    "    # Read a frame from the webcam\n",
    "    ret, frame = cap.read()\n",
    "    if not ret:\n",
    "        break\n",
    "\n",
    "    # Perform keypoint detection\n",
    "    results = detection_keypoint(frame)\n",
    "    \n",
    "    # Check if keypoints or bounding box are detected\n",
    "    if results.keypoints is None or len(results.boxes) == 0:\n",
    "        # Display message if no person or keypoints are detected\n",
    "        cv2.putText(frame, \"No person detected\", (50, 50), \n",
    "                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)\n",
    "        cv2.imshow('Action Detection with Keypoints', frame)\n",
    "        if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "            break\n",
    "        continue\n",
    "\n",
    "    # Extract keypoints for classification\n",
    "    results_keypoint = detection_keypoint.get_xy_keypoint(results)\n",
    "    input_classification = results_keypoint[10:]  # Selecting keypoints subset for classification\n",
    "    results_classification = classification_keypoint(input_classification)\n",
    "\n",
    "    # Get bounding box coordinates\n",
    "    x_min, y_min, x_max, y_max = results.boxes.xyxy[0].cpu().numpy()\n",
    "\n",
    "    # Draw bounding box and classification result on the frame\n",
    "    frame = cv2.rectangle(frame, (int(x_min), int(y_min)), (int(x_max), int(y_max)), (0, 0, 255), 2)\n",
    "    cv2.putText(frame, results_classification.upper(), (int(x_min), int(y_min) - 10), \n",
    "                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)\n",
    "\n",
    "    # Draw keypoints\n",
    "    keypoints = results.keypoints.data[0].cpu().numpy()  # [0] to select the first set of keypoints if there's only one person\n",
    "    \n",
    "    # Iterate over each keypoint\n",
    "    for keypoint in keypoints:\n",
    "        x, y, confidence = keypoint\n",
    "        if confidence > 0.5:  # Draw only keypoints with confidence > 0.5\n",
    "            cv2.circle(frame, (int(x), int(y)), 5, (0, 255, 0), -1)  # Draw green keypoints\n",
    "    \n",
    "    # Define keypoint connections (specific indices may vary depending on your keypoint model)\n",
    "    connections = [\n",
    "        (5, 6), (5, 11), (6, 12), (11, 13), (13, 15), (12, 14), (14, 16)\n",
    "    ]\n",
    "    for (start, end) in connections:\n",
    "        if start < len(keypoints) and end < len(keypoints):  # Ensure indices are within bounds\n",
    "            x_start, y_start, conf_start = keypoints[start]\n",
    "            x_end, y_end, conf_end = keypoints[end]\n",
    "            # Draw line if both points have high confidence\n",
    "            if conf_start > 0.5 and conf_end > 0.5:\n",
    "                cv2.line(frame, (int(x_start), int(y_start)), (int(x_end), int(y_end)), (255, 0, 0), 2)\n",
    "\n",
    "    # Display the frame with the bounding box, keypoints, and classification\n",
    "    cv2.imshow('Action Detection with Keypoints', frame)\n",
    "\n",
    "    # Break loop on 'q' key press\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "        break\n",
    "\n",
    "# Release the video capture object and close windows\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
